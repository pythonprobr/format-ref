----------------------
Locale setting
----------------------

The 'n' type of the formating specification depends on the current locale setting to determine the decimal and thousands numeric separators. To enable a locale that uses '.' as thousands separator and ',' as decimal separator, install the "de_DE" (German) locale. On Ubuntu GNU Linux 11.04, the command is::

  $ sudo /usr/share/locales/install-language-pack de_DE
  
To test the locale setting when formatting, use this:

  >>> import locale
  >>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')
  'de_DE.UTF-8'
  >>> format(12345678.9876,'18.10n')
  '     12.345.678,99'
  >>> 


-----------------------------
Python 2.7 Library Reference
-----------------------------

2. Built-in Functions

http://docs.python.org/library/functions.html#format

format(value[, format_spec])

    Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.

    Note

    format(value, format_spec) merely calls value.__format__(format_spec).

    New in version 2.6.

5.6.1. String Methods
http://docs.python.org/library/stdtypes.html#str.format

This method of string formatting is the new standard in Python 3.0, and should be preferred to the % formatting described in String Formatting Operations in new code.

7.1.2. String Formatting
http://docs.python.org/library/string.html#string-formatting
7.1.3. Format String Syntax
http://docs.python.org/library/string.html#format-string-syntax


-----------------------------
Python 3.2 Library Reference
-----------------------------

4.6.2. Old String Formatting Operations

http://docs.python.org/py3k/library/stdtypes.html#old-string-formatting-operations

Note

The formatting operations described here are obsolete and may go away in future versions of Python. Use the new String Formatting in new code.
